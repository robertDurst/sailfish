/*
 * Robert Durst 2019
 * Sailfish Programming Language
 */
#pragma once
#include "../stdlib_c/stdlib_c.h"
#include <fstream>
#include <iostream>
#include <string>
#include <tuple>
#include <vector>

class Transpiler
{
  private:
    // fields
    std::string buffer;
    std::vector<std::tuple<std::string, std::string>> methodAccessStack;
    std::vector<std::tuple<std::string, std::string>> attributeAccessStack;
    std::string decName;
    std::string decType;
    int currentTabs;
    std::ofstream output;
    int bufferToAdd;

    // methods
    std::string getTabs();
    void clearOpenBeginWriting();
    void writeStandardLibrary();
    std::string extractChainAAType(const std::string&);
    int occurences(const std::string&, const std::string&);
    std::string builtinTypesTranslator(const std::string&);

    // consts
    const std::string OUTPUT_HEADER =
        "/**"
        "\n * Do not alter! This code is generated by the sailfishc"
        "\n * compiler and might/will break if anything changed."
        "\n "
        "\n * This program is free software: you can redistribute it and/or "
        "modify"
        "\n * it under the terms of the GNU General Public License as "
        "published by"
        "\n * the Free Software Foundation, either version 3 of the License, or"
        "\n * (at your option) any later version."
        "\n * "
        "\n * This program is distributed in the hope that it will be useful,"
        "\n * but WITHOUT ANY WARRANTY; without even the implied warranty of"
        "\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
        "\n * GNU General Public License for more details."
        "\n * You should have received a copy of the GNU General Public License"
        "\n *"
        "\n * \"Many men go fishing all their lives without knowing it is"
        "\n * not the fish they are after\" - Henry David Thoreau\n */"
        "\n"
        "\n#include <stdio.h>"
        "\n#include <stdlib.h>"
        "\n#include <string.h>"
        "\n";

  public:
    Transpiler();

    // utility methods
    std::string getBuffer();
    void write(bool);
    void append(const std::string&);
    void incrementTabs();
    void decrementTabs();
    void setDecName(const std::string&);
    void setDecType(const std::string&);
    std::string getDecName();
    std::string getDecType();
    void pushMethod(const std::string&, const std::string&);
    void popMethod();

    // transpilation methods
    void genUDTHeader(const std::string&);
    void genUDTFooter(const std::string&);
    void genLeftCurley();
    void genRightCurley();
    void genLeftParen();
    void genRightParen();
    void genComma();
    void genSemiColonAndNewline();
    void genTypeAndName(const std::string&, const std::string&);
    void genTypeAndNameNewLine(const std::string&, const std::string&);
    void genFunctionEnd();
    void genMainHeader();
    void genMainFooter();
    void genStatementHeader();
    void genStatementFooter();
    void genIfHeader();
    void genElseHeader();
    void genBranchHeader();
    void genBranchFooter();
    void genReturn();
    void genOperator(const std::string&);
    void genAttributeAccess(bool, bool, const std::string&, const std::string&);
    void genUDTDecInit(const std::string&);
    void genUDTDecItem(const std::string&);
    void genLiteral(const std::string&);
    void genListInit(const std::string& type, const std::string size);
    void genListItem(const std::string&, const std::string&);
    void genPrimary(bool, bool, bool, const std::string&);
    void genFinalFunctionCallArg(bool noVoids, bool isUdt);
};