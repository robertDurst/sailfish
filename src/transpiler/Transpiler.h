/*
 * Robert Durst 2019
 * Sailfish Programming Language
 */
#pragma once
#include "../ast/Ast.h"
#include "../semant/CommonExtractions.h"
#include "../visitor/Visitor.h"
#include <fstream>
#include <iostream>
#include <string>

class Transpiler : public Visitor
{
  private:
    ast::Start* root;
    std::string filename;
    std::string fileBuffer;

  public:
    using Visitor::visit;

    // constructor
    Transpiler(ast::Start* r, std::string f)
    {
        root = r;
        filename = f;

        // set the file header here
        fileBuffer =
            "/**\n * Do not alter! This code is generated by the sailfishc\n * "
            "compiler and might/will break if anything changed.\n */\n#include "
            "<stdio.h>\n#include <stdlib.h>\n\n";
    }

    // destructor
    ~Transpiler()
    {
        delete root;
    }

    void transpile();

    // initial execution body
    void visit(ast::InitialExecutionBody*);

    // function declerations
    void visit(ast::FunctionDefinition*);

    // function call
    void visit(ast::FunctionCall*);

    // variable
    void visit(ast::Variable*);

    // typename
    void visit(ast::Typename*);

    // literals
    void visit(ast::Identifier*);
    void visit(ast::BooleanLiteral*);
    void visit(ast::IntegerLiteral*);
    void visit(ast::FloatLiteral*);
    void visit(ast::StringLiteral*);

    // return statement
    void visit(ast::ReturnStatement*);

    // blocks
    void visit(ast::Block*);

    // if statement
    void visit(ast::IfStatement*);

    // binary expression
    void visit(ast::BinaryExpression*);

    // binaries
    void visit(ast::BinaryGreaterThan*);
    void visit(ast::BinaryLessThan*);
    void visit(ast::BinaryGreaterThanOrEqual*);
    void visit(ast::BinaryLessThanOrEqual*);
    void visit(ast::EquivalenceComparison*);
    void visit(ast::NonEquivalenceComparison*);
    void visit(ast::AndComparison*);
    void visit(ast::OrComparison*);
    void visit(ast::Assignment*);

    // arithmetic
    void visit(ast::Exponentiation*);
    void visit(ast::Multiplication*);
    void visit(ast::Division*);
    void visit(ast::Modulo*);
    void visit(ast::Addition*);
    void visit(ast::Subtraction*);

    // unaries
    void visit(ast::Negation*);

    // grouping statement
    void visit(ast::GroupingExpression*);

    // primtive definition
    void visit(ast::PrimitiveDefition* node);

    // expression only binary expression
    void visit(ast::ExpressionOnlyStatement*);
};