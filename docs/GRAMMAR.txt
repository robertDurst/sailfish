Start  := Source
Source := SourcePart*

SourcePart := ExportDefinition |
              FunctionDefinition |
              GeneralDecleration |
              UserDefinedTypeDefinition |
              InitialExecutionBody

ExportDefinition := 'exp' Exportable
Exportable := FunctionDefinition | GeneralDecleration

FunctionDefinition := FunctionName FunctionInput FunctionOutput FunctionBody
FunctionName := 'fun' Identifier
FunctionInput := '<-' InputList 
FunctionOutput := '->' OutputList
FunctionBody := '{' Block '}'

InputList := Input (',' Input)*
Input := Variable
OutputList := Output (',' Output)*
Output := Typename

GeneralDecleration := 'dec' GeneralDefinition
GeneralDefinition := ListDefinition | DictionaryDefinition | NewVariableDefinition
ListDefinition := 'list' Identifier ['=' Expression]
DictionaryDefinition := ''dictionary' Identifier ['=' Expression]
NewVariableDefinition := Variable '=' Expression
RangeVariableDefinition := Variable ':=' Expression
VariableAssignment := Identifier = Expression
ShortVariableDefinition := Variable
VariableDecleration := NewVariableDefinition | RangeVariableDefinition | ShortVariableDefinition
Variable := TypeName Identifier

UserDefinedTypeDefinition := 'Cat' UserDefinedTypeAttributes [UserDefinedTypeMethods]
UserDefinedTypeAttributes := Identifier '{' ShortVariableDefinition* '}'
UserDefinedTypeMethods := 'Cfn' Identifier '{' FunctionDefinition* '}'

InitialExecutionBody := 'start' '{' Block '}'

Block := Statement*

Statement := IfStatement | LoopStatement | '{' Block '}' | SimpleStatement  | 'continue' | 'break' | ReturnStatement
IfStatement := 'if' Expression '{' Statement '}' 'else' '{' Statement '}'
LoopStatement := 'loop' RangeVariableDefinition { Body } | 'loop' Expression { Body }
SimpleStatement := GeneralDefinition | VariableAssignment | ExpressionStatement
ExpressionStatement := Expression
ReturnStatement := 'return' Expression | 'return'

Expression := IndexAccess |
              MemberAccess |
              FunctionCall |
              '(' Expression ')' |
              '!' Expression |
               '**' Expression |
               ('*' | '/' | '%') Expression |
               ('+' | '-') Expression|
               ('>' | '<' | '>=' | '<=') Expression |
               ('==' | '!=') Expression|
               '&&' Expression |
               '||' Expression |
               '=' Expression | 
              PrimaryExpression


IndexAccess := Expression '[' [Expression] ']'
MemberAccess := Expression '.' Identifier

FunctionCall := Identifier '(' [Identifier] (',' Identifier)*')'

PrimaryExpression := BooleanLiteral |
                     DictionaryLiteral |
                     ListLiteral |
                     NumberLiteral |
                     StringLiteral |
                     Identifier |
                     TypenameExpression

BooleanLiteral := 'true' | 'false'
DictionaryLiteral := '[' [DictionaryItem (',' DictionaryItem)] ']'
DictionaryItem := Identifier ':' Identifier
ListLiteral := '[' [ListItem (',' ListItem)] ']'
ListItem := Identifier
NumberLiteral := Integer | Decimal
Integer := [0-9]+
Decimal  := [0-9]+.[0-9]+
StringLiteral := "' ([^"\r\n\\] | '\\' .)* '"'
Identifier := [a-zA-Z] [a-zA-Z_0-9]*
TypenameExpression := Typename
Typename := 'bool' | 'str' | 'int' | 'flt' | 'void'
