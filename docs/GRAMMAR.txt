Start  := Source
Source := SourcePart*

SourcePart := ExportDefinition |
              FunctionDefinition |
              GeneralDecleration |
              UserDefinedTypeDefinition |
              InitialExecutionBody

ExportDefinition := 'exp' Exportable
Exportable := FunctionDefinition | GeneralDecleration

FunctionDefinition := FunctionName FunctionInput FunctionOutput FunctionBody
FunctionName := 'fun' Identifier
FunctionInput := '<-' InputList 
FunctionOutput := '->' OutputList
FunctionBody := Block

InputList := Input (',' Input)*
Input := Variable
OutputList := Output (',' Output)*
Output := Typename

GeneralDecleration := 'dec' GeneralDefinition
GeneralDefinition := ListDefinition | DictionaryDefinition | NewVariableDefinition
ListDefinition := 'list' Identifier
DictionaryDefinition := ''dictionary' Identifier
NewVariableDefinition := Variable '=' Expression
RangeVariableDefinition := Variable ':=' Expression
VariableAssignment := Identifier = Expression
ShortVariableDefinition := Variable
VariableDecleration := NewVariableDefinition | RangeVariableDefinition | ShortVariableDefinition
Variable := TypeName Identifier

UserDefinedTypeDefinition := 'Cat' UserDefinedTypeAttributes [UserDefinedTypeMethods]
UserDefinedTypeAttributes := Identifier '{' Variable* '}'
UserDefinedTypeMethods := 'Cfn' Identifier '{' FunctionDefinition* '}'

InitialExecutionBody := 'start' 'Block

Block := '{' Statement* '}'

Statement := IfStatement | LoopStatement |  Block | SimpleStatement  | 'continue' | 'break' | ReturnStatement
IfStatement := 'if' Expression Block 'else' Block
LoopStatement := 'loop' 'over' RangeVariableDefinition { Body } | 'loop' Expression { Body }
SimpleStatement := GeneralDefinition | ExpressionStatement
ExpressionStatement := Expression
ReturnStatement := 'return' Expression

Expression := IndexAccess |
              MemberAccess |
              FunctionCall |
              '!' Expression |
               '**' Expression |
               ('*' | '/' | '%') Expression |
               ('+' | '-') Expression|
               ('>' | '<' | '>=' | '<=') Expression |
               ('==' | '!=') Expression|
               '&&' Expression |
               '||' Expression |
               '=' Expression | 
              PrimaryExpression


IndexAccess := '[' IntegerLiteral ']'
MemberAccess := '.' Identifier

FunctionCall := '(' [Expression] (',' Expression)*')'

PrimaryExpression := Primary

Primary := BooleanLiteral |
           DictionaryLiteral |
           ListLiteral |
           NumberLiteral |
           StringLiteral |
           Identifier

BooleanLiteral := 'true' | 'false'
DictionaryLiteral := '{' [DictionaryItem (',' DictionaryItem)] '}'
DictionaryItem := Identifier ':' Identifier
ListLiteral := '[' [ListItem (',' ListItem)] ']'
ListItem := Identifier
NumberLiteral := Integer | Decimal
Integer := [0-9]+
Decimal  := [0-9]+.[0-9]+
StringLiteral := "' ([^"\r\n\\] | '\\' .)* '"'
Identifier := [a-zA-Z] [a-zA-Z_0-9]*
Typename := 'bool' | 'str' | 'int' | 'flt' | 'void'
